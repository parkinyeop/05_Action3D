//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""c91bc9c6-7f12-4a7b-8c58-16e4fbd67fe7"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4872c3d9-b2f8-459e-b0c8-e7adf5101567"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveModeChange"",
                    ""type"": ""Button"",
                    ""id"": ""1a7fcb21-14c8-482d-9cb7-e4360b4faa75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""76ce8187-9530-460e-8941-8c52f51dbaca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""623c6540-cc99-4e9d-858a-4e9ac331686c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f6bb4515-1617-4423-96c9-589d218b7a1b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1e71d6da-6c11-487d-bfdf-c9d7c10ade2f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""72db71e3-8326-4e9b-a18c-2aff3841278d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e636e339-1e66-48b7-a365-6bb3b0f68238"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""dc2b3a68-c854-4bbb-b2a3-5fe0c6f40011"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveModeChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2bbc742-3918-49a3-9caa-743f3c2c9d4f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e719536a-43c3-4888-8e5f-e0b148d6e051"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Test"",
            ""id"": ""044ba796-1680-4d84-8067-4970743c8dac"",
            ""actions"": [
                {
                    ""name"": ""Test_1"",
                    ""type"": ""Button"",
                    ""id"": ""237c51e4-25fc-4ee7-8eb2-772518aca12d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test_2"",
                    ""type"": ""Button"",
                    ""id"": ""fd621df2-8b85-4549-9e5c-05669be321e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test_3"",
                    ""type"": ""Button"",
                    ""id"": ""a6d961fe-00cb-47a3-a56a-1f438babe97d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test_4"",
                    ""type"": ""Button"",
                    ""id"": ""90b66977-e84d-422f-a601-c3422d0a6372"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test_5"",
                    ""type"": ""Button"",
                    ""id"": ""77e0a890-b235-48f5-9cdb-af3857696348"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6e48dded-93cd-4537-a1a9-61161233c076"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test_1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""703b5b24-cebc-4eb9-b4ba-8b3dce71cf02"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test_2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9c03da6-4278-4c38-be21-4de01c0c7a6a"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test_3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e34e7cb9-49d1-4818-bb2c-acab0cbbf807"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test_4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""839bc28f-b13f-495a-a2f6-5d86cc9903e9"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test_5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player"",
            ""bindingGroup"": ""Player"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_MoveModeChange = m_Player.FindAction("MoveModeChange", throwIfNotFound: true);
        m_Player_Attack = m_Player.FindAction("Attack", throwIfNotFound: true);
        // Test
        m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
        m_Test_Test_1 = m_Test.FindAction("Test_1", throwIfNotFound: true);
        m_Test_Test_2 = m_Test.FindAction("Test_2", throwIfNotFound: true);
        m_Test_Test_3 = m_Test.FindAction("Test_3", throwIfNotFound: true);
        m_Test_Test_4 = m_Test.FindAction("Test_4", throwIfNotFound: true);
        m_Test_Test_5 = m_Test.FindAction("Test_5", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_MoveModeChange;
    private readonly InputAction m_Player_Attack;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @MoveModeChange => m_Wrapper.m_Player_MoveModeChange;
        public InputAction @Attack => m_Wrapper.m_Player_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @MoveModeChange.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveModeChange;
                @MoveModeChange.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveModeChange;
                @MoveModeChange.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveModeChange;
                @Attack.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @MoveModeChange.started += instance.OnMoveModeChange;
                @MoveModeChange.performed += instance.OnMoveModeChange;
                @MoveModeChange.canceled += instance.OnMoveModeChange;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Test
    private readonly InputActionMap m_Test;
    private ITestActions m_TestActionsCallbackInterface;
    private readonly InputAction m_Test_Test_1;
    private readonly InputAction m_Test_Test_2;
    private readonly InputAction m_Test_Test_3;
    private readonly InputAction m_Test_Test_4;
    private readonly InputAction m_Test_Test_5;
    public struct TestActions
    {
        private @PlayerInputActions m_Wrapper;
        public TestActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Test_1 => m_Wrapper.m_Test_Test_1;
        public InputAction @Test_2 => m_Wrapper.m_Test_Test_2;
        public InputAction @Test_3 => m_Wrapper.m_Test_Test_3;
        public InputAction @Test_4 => m_Wrapper.m_Test_Test_4;
        public InputAction @Test_5 => m_Wrapper.m_Test_Test_5;
        public InputActionMap Get() { return m_Wrapper.m_Test; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
        public void SetCallbacks(ITestActions instance)
        {
            if (m_Wrapper.m_TestActionsCallbackInterface != null)
            {
                @Test_1.started -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_1;
                @Test_1.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_1;
                @Test_1.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_1;
                @Test_2.started -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_2;
                @Test_2.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_2;
                @Test_2.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_2;
                @Test_3.started -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_3;
                @Test_3.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_3;
                @Test_3.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_3;
                @Test_4.started -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_4;
                @Test_4.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_4;
                @Test_4.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_4;
                @Test_5.started -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_5;
                @Test_5.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_5;
                @Test_5.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnTest_5;
            }
            m_Wrapper.m_TestActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Test_1.started += instance.OnTest_1;
                @Test_1.performed += instance.OnTest_1;
                @Test_1.canceled += instance.OnTest_1;
                @Test_2.started += instance.OnTest_2;
                @Test_2.performed += instance.OnTest_2;
                @Test_2.canceled += instance.OnTest_2;
                @Test_3.started += instance.OnTest_3;
                @Test_3.performed += instance.OnTest_3;
                @Test_3.canceled += instance.OnTest_3;
                @Test_4.started += instance.OnTest_4;
                @Test_4.performed += instance.OnTest_4;
                @Test_4.canceled += instance.OnTest_4;
                @Test_5.started += instance.OnTest_5;
                @Test_5.performed += instance.OnTest_5;
                @Test_5.canceled += instance.OnTest_5;
            }
        }
    }
    public TestActions @Test => new TestActions(this);
    private int m_PlayerSchemeIndex = -1;
    public InputControlScheme PlayerScheme
    {
        get
        {
            if (m_PlayerSchemeIndex == -1) m_PlayerSchemeIndex = asset.FindControlSchemeIndex("Player");
            return asset.controlSchemes[m_PlayerSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMoveModeChange(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface ITestActions
    {
        void OnTest_1(InputAction.CallbackContext context);
        void OnTest_2(InputAction.CallbackContext context);
        void OnTest_3(InputAction.CallbackContext context);
        void OnTest_4(InputAction.CallbackContext context);
        void OnTest_5(InputAction.CallbackContext context);
    }
}
